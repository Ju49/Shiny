shiny::runApp()
runApp()
runApp()
runApp()
runApp('C:/Users/MOI/Desktop/OPEN/5 lundi 1105 (shiny)/shiny1.R')
# Définition de l'interface utilisateur de notre application
ui <- shinyUI(fluidPage(
# Le titre de votre application
titlePanel("Aperçu d'un dataset"),
#Indiquer le 'layout' de votre application : autrement dit le squelette visuel de l'application
sidebarLayout(
#Composants de la région gauche de l'application
sidebarPanel(
#Ici, nous insérons un champ pour entrer un chiffre, ainsi qu'un menu déroulant
textInput(inputId = "lignes",
label = "Combien de lignes voulez-vous voir ? ",
value = 10),
selectInput(inputId = "labs",
label = "Dataset",
choice = c("cars","rock","beaver1", "sleep")
)
),
#Ici, nous indiquons l'élement qui sera présent dans la fenêtre principale : l'element "dataset", qui est un graph
mainPanel(
tableOutput("dataset")
)
)))
server <- shinyServer(function(input, output) {
#On retrouve ici l'élement "dataset", qui communique avec ui par 'output'.
output$dataset <- renderTable({
#Nous imprimons les éléments d'après les données en entrée : ces derniers sont appellés avec `ìnput` puis le nom de la composante de ui (ici 'labs' et 'lignes')
if(input$labs == "cars"){
print(head(cars, input$lignes))
} else if(input$labs == "rock"){
print(head(rock, input$lignes))
} else if(input$labs == "sleep"){
print(head(sleep, input$lignes))
} else {
print(head(beaver1, input$lignes))
}
})
})
# Définition de l'interface utilisateur de notre application
ui <- shinyUI(fluidPage(
# Le titre de votre application
titlePanel("Aperçu d'un dataset"),
#Indiquer le 'layout' de votre application : autrement dit le squelette visuel de l'application
sidebarLayout(
#Composants de la région gauche de l'application
sidebarPanel(
#Ici, nous insérons un champ pour entrer un chiffre, ainsi qu'un menu déroulant
textInput(inputId = "lignes",
label = "Combien de lignes voulez-vous voir ? ",
value = 10),
selectInput(inputId = "labs",
label = "Dataset",
choice = c("cars","rock","beaver1", "sleep")
)
),
#Ici, nous indiquons l'élement qui sera présent dans la fenêtre principale : l'element "dataset", qui est un graph
mainPanel(
tableOutput("dataset")
)
)))
server <- shinyServer(function(input, output) {
#On retrouve ici l'élement "dataset", qui communique avec ui par 'output'.
output$dataset <- renderTable({
#Nous imprimons les éléments d'après les données en entrée : ces derniers sont appellés avec `ìnput` puis le nom de la composante de ui (ici 'labs' et 'lignes')
if(input$labs == "cars"){
print(head(cars, input$lignes))
} else if(input$labs == "rock"){
print(head(rock, input$lignes))
} else if(input$labs == "sleep"){
print(head(sleep, input$lignes))
} else {
print(head(beaver1, input$lignes))
}
})
})
runApp('~/shinyB')
runApp('~/shinyB')
# Définition de l'interface utilisateur de notre application
ui <- shinyUI(fluidPage(
# Le titre de votre application
titlePanel("Aperçu d'un dataset"),
#Indiquer le 'layout' de votre application : autrement dit le squelette visuel de l'application
sidebarLayout(
#Composants de la région gauche de l'application
sidebarPanel(
#Ici, nous insérons un champ pour entrer un chiffre, ainsi qu'un menu déroulant
textInput(inputId = "lignes",
label = "Combien de lignes voulez-vous voir ? ",
value = 10),
selectInput(inputId = "labs",
label = "Dataset",
choice = c("cars","rock","beaver1", "sleep")
)
),
#Ici, nous indiquons l'élement qui sera présent dans la fenêtre principale : l'element "dataset", qui est un graph
mainPanel(
tableOutput("dataset")
)
)))
server <- shinyServer(function(input, output) {
#On retrouve ici l'élement "dataset", qui communique avec ui par 'output'.
output$dataset <- renderTable({
#Nous imprimons les éléments d'après les données en entrée : ces derniers sont appellés avec `ìnput` puis le nom de la composante de ui (ici 'labs' et 'lignes')
if(input$labs == "cars"){
print(head(cars, input$lignes))
} else if(input$labs == "rock"){
print(head(rock, input$lignes))
} else if(input$labs == "sleep"){
print(head(sleep, input$lignes))
} else {
print(head(beaver1, input$lignes))
}
})
})
library(shiny)
# Définition de l'interface utilisateur de notre application
ui <- shinyUI(fluidPage(
# Le titre de votre application
titlePanel("Aperçu d'un dataset"),
#Indiquer le 'layout' de votre application : autrement dit le squelette visuel de l'application
sidebarLayout(
#Composants de la région gauche de l'application
sidebarPanel(
#Ici, nous insérons un champ pour entrer un chiffre, ainsi qu'un menu déroulant
textInput(inputId = "lignes",
label = "Combien de lignes voulez-vous voir ? ",
value = 10),
selectInput(inputId = "labs",
label = "Dataset",
choice = c("cars","rock","beaver1", "sleep")
)
),
#Ici, nous indiquons l'élement qui sera présent dans la fenêtre principale : l'element "dataset", qui est un graph
mainPanel(
tableOutput("dataset")
)
)))
server <- shinyServer(function(input, output) {
#On retrouve ici l'élement "dataset", qui communique avec ui par 'output'.
output$dataset <- renderTable({
#Nous imprimons les éléments d'après les données en entrée : ces derniers sont appellés avec `ìnput` puis le nom de la composante de ui (ici 'labs' et 'lignes')
if(input$labs == "cars"){
print(head(cars, input$lignes))
} else if(input$labs == "rock"){
print(head(rock, input$lignes))
} else if(input$labs == "sleep"){
print(head(sleep, input$lignes))
} else {
print(head(beaver1, input$lignes))
}
})
})
library(shiny)
# Définition de l'interface utilisateur de notre application
ui <- shinyUI(fluidPage(
# Le titre de votre application
titlePanel("Aperçu d'un dataset"),
#Indiquer le 'layout' de votre application : autrement dit le squelette visuel de l'application
sidebarLayout(
#Composants de la région gauche de l'application
sidebarPanel(
#Ici, nous insérons un champ pour entrer un chiffre, ainsi qu'un menu déroulant
textInput(inputId = "lignes",
label = "Combien de lignes voulez-vous voir ? ",
value = 10),
selectInput(inputId = "labs",
label = "Dataset",
choice = c("cars","rock","beaver1", "sleep")
)
),
#Ici, nous indiquons l'élement qui sera présent dans la fenêtre principale : l'element "dataset", qui est un graph
mainPanel(
tableOutput("dataset")
)
)))
server <- shinyServer(function(input, output) {
#On retrouve ici l'élement "dataset", qui communique avec ui par 'output'.
output$dataset <- renderTable({
#Nous imprimons les éléments d'après les données en entrée : ces derniers sont appellés avec `ìnput` puis le nom de la composante de ui (ici 'labs' et 'lignes')
if(input$labs == "cars"){
print(head(cars, input$lignes))
} else if(input$labs == "rock"){
print(head(rock, input$lignes))
} else if(input$labs == "sleep"){
print(head(sleep, input$lignes))
} else {
print(head(beaver1, input$lignes))
}
})
})
library (shiny)
5+2
shinyUI( pageWithSidebar( # mise en page shiny standard : éléments de contrôle à gauche et sorties à droite
headerPanel("Premier exemple"), # titre de l'appli
sidebarPanel( # cette partie va contenir tous les éléments de contrôle de l'UI
textInput(inputId = "entree_texte", # nom associé à cet élément de contrôle, sera utilisé dans la partie 'server'
label = "Entrez du texte :", # libellé associé à cet élément de contrôle
value = "") # valeur par défaut
),
mainPanel( # cette partie va contenir les sorties
h3("Voici le texte que vous avez entré :"), # titre donné à la partie présentant les sorties, l'élément h3 correspond à une balise "<h3>" en html, ie. le titre sera mis en valeur
textOutput("sortie_texte") # va permettre d'afficher une sortie de type 'texte', le contenu sera défini dans la partie 'server' avec comme nom de variable 'sortie_texte'
)
))
# Run the application
shinyApp(ui = ui, server = server)
# Run the application
shinyApp(ui = ui, server = server)
library(shiny) # il faut charger le package au début de chacun des scripts
shinyUI( pageWithSidebar( # mise en page shiny standard : éléments de contrôle à gauche et sorties à droite
headerPanel("Premier exemple"), # titre de l'appli
sidebarPanel( # cette partie va contenir tous les éléments de contrôle de l'UI
textInput(inputId = "entree_texte", # nom associé à cet élément de contrôle, sera utilisé dans la partie 'server'
label = "Entrez du texte :", # libellé associé à cet élément de contrôle
value = "") # valeur par défaut
),
mainPanel( # cette partie va contenir les sorties
h3("Voici le texte que vous avez entré :"), # titre donné à la partie présentant les sorties, l'élément h3 correspond à une balise "<h3>" en html, ie. le titre sera mis en valeur
textOutput("sortie_texte") # va permettre d'afficher une sortie de type 'texte', le contenu sera défini dans la partie 'server' avec comme nom de variable 'sortie_texte'
)
))
# Run the application
shinyApp(ui = ui, server = server)
library(shiny) # il faut charger le package au début de chacun des scripts
shinyServer( function(input, output) { # les éléments de la partie 'server' vont être définis ici
output$sortie_texte <- renderText({ # fonction réactive 'shiny' utilisée pour afficher du texte dans une interface 'UI', ici le résultat de cet élément sera assigné à 'sortie_texte'
paste0("Texte entré : ", input$entree_texte,
". Ce texte comporte ", nchar(input$entree_texte), " caractères.")
# la ligne ci-dessus permet de concaténer du texte (entre guillemets) et le texte récupéré depuis la partie 'UI' qui est stocké dans 'entree_texte'(NB: nchar() est une fonction R permettant le calcul du nombre de caractères dans une chaîne de caractères)
})
})
# Run the application
shinyApp(ui = ui, server = server)
runApp('~/testUI')
runApp('~/testUI')
runApp('~/testUI')
runApp('~/testSERVER')
